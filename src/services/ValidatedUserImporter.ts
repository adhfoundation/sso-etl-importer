import { UserWithRelations } from "../repositories/StgUserRepository";
import { ValidationPipeline } from "../validators/BaseValidator/ValidationPipeline";
import { LogtoUserImporter } from "../logto/LogtoUserImporter";
import { ImportLoggerService } from "./ImportLoggerService";
import { StgImportLogRepository } from "../repositories/StgImportLogRepository";
import { PrismaClient } from "@prisma/client";

export class ValidatedUserImporter {
  private validationPipeline: ValidationPipeline;
  private logtoImporter: LogtoUserImporter;
  private logger: ImportLoggerService;

  constructor(prisma: PrismaClient) {
    this.validationPipeline = new ValidationPipeline();
    this.logtoImporter = new LogtoUserImporter();
    this.logger = new ImportLoggerService(new StgImportLogRepository(prisma));
  }

  async importWithValidation(users: UserWithRelations[]): Promise<{
    imported: number;
    failed: number;
    skipped: number;
    report: any;
  }> {
    console.log(`\nüîç Iniciando valida√ß√£o de ${users.length} usu√°rios...`);
    
    // Filtrar usu√°rios v√°lidos
    const { valid, invalid } = await this.validationPipeline.filterValidUsers(users);
    
    console.log(`‚úÖ ${valid.length} usu√°rios v√°lidos`);
    console.log(`‚ùå ${invalid.length} usu√°rios com problemas`);

    // Log detalhado dos usu√°rios inv√°lidos
    if (invalid.length > 0) {
      console.log("\nüìã Detalhes dos usu√°rios inv√°lidos:");
      invalid.forEach(({ user, context }) => {
        console.log(`\nüë§ Usu√°rio ID ${user.id} (${user.primary_email || user.username}):`);
        if (context.errors.length > 0) {
          console.log("‚ùå Erros:");
          context.errors.forEach(error => console.log(`  - ${error}`));
        }
        if (context.logs.length > 0) {
          console.log("üìù Logs:");
          context.logs.forEach(log => console.log(`  - ${log}`));
        }
      });
    }

    // Importar apenas usu√°rios v√°lidos
    let imported = 0;
    let failed = 0;
    let skipped = 0;

    for (const user of valid) {
      try {
        console.log(`\nüì¶ Importando usu√°rio ID ${user.id} (${user.primary_email || user.username})...`);
        
        const result = await this.logtoImporter.importUser(user);
        
        if (result.logtoUserId) {
          imported++;
          console.log(`‚úÖ Usu√°rio ID ${user.id} importado com sucesso (LogTo ID: ${result.logtoUserId})`);
          
          await this.logger.log(
            "IMPORT-VALIDATION_SUCCESS--TO-LOGTO",
            `Usu√°rio ${user.primary_email || user.username} importado com sucesso`,
            user.id.toString(),
            "validation",
            "00000000-0000-0000-0000-000000000000",
            user.id
          );
        }
      } catch (error: any) {
        failed++;
        console.error(`‚ùå Erro ao importar usu√°rio ID ${user.id}:`, error.message);
        
        await this.logger.log(
          "IMPORT-VALIDATION_ERROR--TO-LOGTO",
          `[userId: ${user.id}]\n\n[importUser] - ${error.message}`,
          user.id.toString(),
          "validation",
          "00000000-0000-0000-0000-000000000000"
        );
      }
    }

    // Gerar relat√≥rio completo
    const report = await this.validationPipeline.generateValidationReport(users);

    return {
      imported,
      failed,
      skipped: invalid.length,
      report
    };
  }

  async generateDetailedReport(users: UserWithRelations[]): Promise<void> {
    const report = await this.validationPipeline.generateValidationReport(users);
    
    console.log("\nüìä RELAT√ìRIO DETALHADO DE VALIDA√á√ÉO");
    console.log("=" .repeat(50));
    console.log(`üìà Total de usu√°rios: ${report.total}`);
    console.log(`‚úÖ V√°lidos: ${report.valid}`);
    console.log(`‚ùå Inv√°lidos: ${report.invalid}`);
    console.log(`üìä Taxa de sucesso: ${((report.valid / report.total) * 100).toFixed(2)}%`);
    
    if (Object.keys(report.errorsByType).length > 0) {
      console.log("\nüîç Erros por tipo:");
      Object.entries(report.errorsByType).forEach(([type, count]) => {
        console.log(`  - ${type}: ${count}`);
      });
    }

    if (report.details.length > 0) {
      console.log("\nüìã Detalhes dos problemas:");
      report.details
        .filter(detail => detail.errors.length > 0)
        .slice(0, 10) // Mostrar apenas os primeiros 10
        .forEach(detail => {
          console.log(`\nüë§ Usu√°rio ID ${detail.userId}:`);
          detail.errors.forEach(error => console.log(`  ‚ùå ${error}`));
        });
      
      if (report.details.filter(d => d.errors.length > 0).length > 10) {
        console.log(`\n... e mais ${report.details.filter(d => d.errors.length > 0).length - 10} usu√°rios com problemas`);
      }
    }
  }

  async validateOnly(users: UserWithRelations[]): Promise<{
    valid: UserWithRelations[];
    invalid: Array<{ user: UserWithRelations; context: any }>;
    report: any;
  }> {
    console.log(`\nüîç Validando ${users.length} usu√°rios...`);
    
    const { valid, invalid } = await this.validationPipeline.filterValidUsers(users);
    const report = await this.validationPipeline.generateValidationReport(users);
    
    console.log(`‚úÖ ${valid.length} usu√°rios v√°lidos`);
    console.log(`‚ùå ${invalid.length} usu√°rios com problemas`);
    
    return { valid, invalid, report };
  }
}
